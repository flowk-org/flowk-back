package com.example.flowkback.adapter.kafka

import com.example.flowkback.app.api.executor.PipelineExecutor
import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Component

@Component
class PipelineListener(
    private val pipelineExecutor: PipelineExecutor,
    private val objectMapper: ObjectMapper
) {

//    @KafkaListener(topics = ["stage.started"], groupId = "pipeline-executor")
//    fun onStageStarted(message: String) {
//        val event = objectMapper.readValue(message, StageStartedEvent::class.java)
//        println("üîß Stage started: ${event.stage.name} for pipeline ${event.pipelineId}")
//        // –ó–∞–ø—É—Å–∫ —Å—Ç–∞–¥–∏–∏ –≤ StageExecutor
//        pipelineExecutor.executeNextStage(event.pipelineId)
//    }
//
//    @KafkaListener(topics = ["stage.completed"], groupId = "pipeline-executor")
//    fun onStageCompleted(message: String) {
//        val event = objectMapper.readValue(message, StageCompletedEvent::class.java)
//        println("‚úÖ Stage completed: ${event.stage.name} for pipeline ${event.pipelineId}")
//        // –ó–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏
//        pipelineExecutor.executeNextStage(event.pipelineId)
//    }
//
//    @KafkaListener(topics = ["stage.failed"], groupId = "pipeline-executor")
//    fun onStageFailed(message: String) {
//        val event = ObjectMapper().readValue(message, StageFailedEvent::class.java)
//        println("‚ùå Stage failed: ${event.stage.name} for pipeline ${event.pipelineId}. Error: ${event.error}")
//        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä
//    }
}
